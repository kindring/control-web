/** 创建一个实例化的智能对象,智能对象只有两种的状态开或者是关 */
module.exports = {
    tableLamp: {
        title: '台灯',
        //自定义的设备实例的id,数值为字符串,用于比对在其他地方专门获取该设备
        sign: 'tableLamp',
        controller: 'orangePiGpio',
        /**设备在前端页面中的显示状态 */
        showMsg: {
            title: '暖光小台灯',
            msg: 'gpio 10 口 高电平继电器', //设备的详细信息即设备的一些基础信息
            /**
             * 该设备的图片,可以用来显示状态.
             * 也可以在state中单独设置某些状态的图片
             * 可以为空,单独设置state状态.也可以完全省略.
             * 前端到时候根据此数据进行操作
             */
            img: '',
            /** 关闭按钮的显示文字,如果没有值则不会进行显示 */
            offBtn: '关闭',
            /** 开启按钮的显示文字 */
            onBtn: '点亮世界',
            /**
             * 给每个状态单独设置显示状态
             * on -> 设备开启的状态
             * off -> 设备关闭的状态
             * offline -> 设备离线的状态,就是获取不到设备的状态的情况
             */
            state: {
                on: {
                    img: ''
                }
            }
        },
        /** 设备信息
         * 该数据用于标记一些设备的物理信息,比如gpio的端口
         */
        device: {
            gpio: 10
        },
        /** 操作指令相关的操作,
         * 该里面的值将会传入到设备的指令生成函数进行生成指令
         * 
         * */
        instruction: {
            /** 公共参数,无论如何都会传入当前的参数.
            /* 具体操作时会自动将设备的信息传递进去,加上这个值
            */
            public: {
                level,
            },
            //主动切换到相关的状态的参数
            off: {
                mode: 'out'
            },
            on: {
                mode: 'on'
            },
        },
        /** 返回值设置
         * 用来指定某些情况的返回值是否符合预期
         * 用来在指令处理函数中与函数返回值进行对比
         * 该设置可以为空
         */
        response: {
            public: {
                value: 'ok',
            }
        },
        /** 状态值设定
         * 自定义关闭状态用什么值去设置,
         */
        stateValue: {
            public: {
                mode: 'out'
            },
            on: {
                level: 1
            }
        }

    }
}

// 联合设备,一个东西有多个的控制器那种,比如电脑,有些电脑是有时序电源的,有些则没有
// let